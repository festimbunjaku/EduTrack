PROJEKT NË INXHINIERINË SOFTUERIKE






TITULLI: EduTrack - Sistem i Menaxhimit të Kurseve Fizike


Version Number: 1.0


Kopja elektronike dorëzuar me email.

Fakulteti i Shkencave Kompjuterike,
Universiteti AAB


Festim Bunjaku







 
Software Project Management Plan (SPMP)





1.	HYRJE

1.1.Përmbledhje e produktit

EduTrack është një aplikacion web i dizajnuar për të menaxhuar kurse fizike. Ai ofron një platformë të plotë për administrimin e kurseve, regjistrimeve të studentëve, materialeve mësimore, dhe detyrave të shtëpisë. Sistemi mbështet tre role kryesore përdoruesish: studentë, mësimdhënës dhe administratorë, secili me qasje dhe funksionalitete specifike.

Sistemi është ndërtuar duke përdorur Laravel 12 në backend, React 19 me TypeScript në frontend përmes Inertia.js 2.0, dhe Tailwind CSS me komponentë Shadcn/UI për dizajn. Qëllimi kryesor i sistemit është të thjeshtësojë procesin e menaxhimit të kurseve fizike, duke përfshirë regjistrimin e studentëve, publikimin e materialeve, caktimin e detyrave dhe gjenerimin e certifikatave.


1.2.Dorëzimi i projektit

Projekti do të dorëzohet si një aplikacion web i plotë me dokumentacion të detajuar për të gjitha fazat e zhvillimit, duke përfshirë planifikimin, dizajnin, implementimin dhe testimet. Dorëzimi përfshin:
- Kodin burimor të projektit
- Dokumentacionin e plotë (SPMP, SRS, SDD, STD)
- Udhëzuesin e instalimit dhe konfigurimit
- Manualin e përdorimit


2. PLANI I MENAXHIMIT TË PROJEKTIT

2.1.	Detyrat

2.1.1.	Përshkrimi i detyrave

1. Inicializimi i projektit dhe konfigurimi i teknologjive:
   - Konfigurimi i Laravel 12 me Inertia.js 2.0
   - Integrimi i React me TypeScript
   - Konfigurimi i Tailwind CSS dhe shadcn/ui
   - Organizimi i strukturës bazë të folderave

2. Sistemi i autentifikimit:
   - Implementimi i funksionalitetit të hyrjes dhe regjistrimit
   - Verifikimi i emailit për regjistrim
   - Rikuperimi i fjalëkalimit
   - Funksionaliteti "më mbaj mend"

3. Kontrolli i qasjes bazuar në role:
   - Instalimi i paketës Spatie për role dhe leje
   - Krijimi i roleve (Student, Mësimdhënës, Administrator)
   - Konfigurimi i middleware për rrugët bazuar në role

4. Dashboard-et për secilën role:
   - Krijimi i komponentit bazë të layout-it me sidebar dhe header
   - Ndërtimi i pamjeve të dashboard-it për Studentë, Mësimdhënës dhe Administratorë
   - Implementimi i dizajnit responsiv

5. Menaxhimi i përdoruesve:
   - Krijimi i ndërfaqes për listimin e përdoruesve
   - Implementimi i kërkimit dhe filtrimeve
   - Krijimi dhe editimi i përdoruesve
   - Menaxhimi i profileve

6. Menaxhimi i kurseve:
   - Krijimi i modelit dhe strukturës së databazës për kurset
   - Ndërfaqja e administratorit për menaxhimin e kurseve
   - Caktimi i mësimdhënësve për kurse

7. Sistemi i regjistrimit me proces aprovimi:
   - Krijimi i funksionalitetit të kërkesës për regjistrim
   - Ndërfaqja e aprovimit/refuzimit për administratorët
   - Ndjekja e statusit të regjistrimit

8. Menaxhimi i materialeve të kursit:
   - Ndërfaqja për ngarkimin e materialeve nga mësimdhënësit
   - Organizimi i materialeve sipas kategorive
   - Qasja e studentëve në materiale

9. Sistemi i detyrave:
   - Krijimi i detyrave nga mësimdhënësit
   - Dorëzimi i detyrave nga studentët
   - Rishikimi dhe vlerësimi i dorëzimeve

10. Sistemi i certifikatave:
    - Gjenerimi i certifikatave për kurset e përfunduara
    - Eksportimi në PDF
    - Verifikimi i certifikatave

11. Testimi dhe optimizimi:
    - Testimet funksionale
    - Testimet e njësive
    - Optimizimi i performancës
    - Sigurimi i ndërfaqes mobile responsive

12. Dokumentimi:
    - Përgatitja e dokumentacionit të plotë
    - Krijimi i manualit të përdorimit


2.1.2.	Koha e përfundimit të detyrave

1. Inicializimi i projektit: 1 javë
2. Sistemi i autentifikimit: 1 javë
3. Kontrolli i qasjes bazuar në role: 1 javë
4. Dashboard-et për secilën role: 1 javë
5. Menaxhimi i përdoruesve: 2 javë
6. Menaxhimi i kurseve: 2 javë
7. Sistemi i regjistrimit: 1 javë
8. Menaxhimi i materialeve: 1 javë
9. Sistemi i detyrave: 2 javë
10. Sistemi i certifikatave: 1 javë
11. Testimi dhe optimizimi: 2 javë
12. Dokumentimi: 1 javë

Totali: 16 javë për përfundimin e projektit semestrial


2.1.3.	Varësia dhe kufizimet

Varësitë:
- Detyra 2-12 varen nga përfundimi i detyrës 1 (inicializimi i projektit)
- Detyra 4 varet nga përfundimi i detyrës 2 dhe 3
- Detyra 5 varet nga detyra 3
- Detyra 7 varet nga përfundimi i detyrës 6
- Detyra 9 varet nga përfundimi i detyrës 8
- Detyra 10 varet nga përfundimi i detyrës 9
- Detyra 11 varet nga përfundimi i detyrës 10
- Detyra 12 varet nga përfundimi i të gjitha detyrave të mëparshme

Kufizimet:
- Projekti duhet të përfundojë brenda semestrit akademik
- Sistemi duhet të jetë i përshtatshëm për përdorim në pajisje të ndryshme
- Burimet e limituara (zhvillim individual nga një student)
- Koha e kufizuar për implementimin e të gjitha funksionaliteteve
- Kurset fizike kanë një limit prej 20 studentësh


2.1.4.	Reziku dhe të papriturat

Risqet:
1. Vonesa në implementimin e funksionaliteteve komplekse
2. Ndryshime në kërkesat gjatë zhvillimit
3. Probleme me integrimet e teknologjive të ndryshme
4. Vështirësi në implementimin e sistemit të certifikatave
5. Probleme me performancën në ngarkesa të mëdha

Strategjitë e zbutjes:
1. Planifikim i detajuar dhe ndarje e detyrave në pjesë më të vogla
2. Komunikim i vazhdueshëm me mentorin për të qartësuar kërkesat
3. Testim i hershëm i integrimeve kritike
4. Krijimi i prototipeve për funksionalitete komplekse
5. Optimizimi i vazhdueshëm i performancës gjatë zhvillimit


2.2. Project Network

2.2.1	CPM Tabela

CPM – Critical Path Method për projektin EduTrack:

Aktiviteti | Kohëzgjatja (javë) | Paraardhësi | ES | EF | LS | LF | Slack
-----------|-------------------|-------------|---|---|---|---|------
1. Inicializimi | 1                 | - |       1 | 0 | 1 | 0
2. Autentifikimi | 1 |              1 |          2 | 1 | 2 | 0
3. Kontrolli i qasjes | 1 |            2 |     | 3 | 2 | 3 | 0
4. Dashboard-et | 1 |                  3 |     | 4 | 3 | 4 | 0
5. Menaxhimi i përdoruesve | 2 |                 5 | 4 | 6 | 1
6. Menaxhimi i kurseve | 2 |                     6 | 4 | 6 | 0
7. Sistemi i regjistrimit | 1 |                 7 | 6 | 7 | 0
8. Menaxhimi i materialeve | 1 |                 8 | 7 | 8 | 0
9. Sistemi i detyrave | 2 |                     10 | 8 | 10 | 0
10. Sistemi i certifikatave |               9 | 11 | 10 | 11 | 0
11. Testimi | 2 |                               10 | 11 | 13 | 11 | 13 | 0
12. Dokumentimi | 1 |                            11 | 13 | 14 | 13 | 14 | 0

Rruga kritike: 1 -> 2 -> 3 -> 4 -> 6 -> 7 -> 8 -> 9 -> 10 -> 11 -> 12


2.2.2	Tabela e pasimit të detyrave

Detyra | Paraardhësi | Pasardhësi
-------|------------|------------
1. Inicializimi | - | 2
2. Autentifikimi | 1 | 3
3. Kontrolli i qasjes | 2 | 4, 5
4. Dashboard-et | 3 | 6
5. Menaxhimi i përdoruesve | 3 | -
6. Menaxhimi i kurseve | 4 | 7
7. Sistemi i regjistrimit | 6 | 8
8. Menaxhimi i materialeve | 7 | 9
9. Sistemi i detyrave | 8 | 10
10. Sistemi i certifikatave | 9 | 11
11. Testimi | 10 | 12
12. Dokumentimi | 11 | -





Specifikimi I kërkesave të sistemit (Software Requirements Specifications (SRS))







HYRJE
1.1 "EduTrack" është një sistem menaxhimi i kurseve fizike i dizajnuar për të lehtësuar administrimin e kurseve, regjistrimin e studentëve, dhe menaxhimin e materialeve mësimore. Qëllimi i këtij dokumenti është të përshkruajë kërkesat funksionale dhe jo-funksionale të sistemit, duke përfshirë ndërfaqen e përdoruesit, funksionalitetet kryesore, dhe specifikimet teknike.

1.2 Sistemi është ndërtuar për t'u përdorur nga tre kategori përdoruesish:
- Studentët: mund të regjistrohen në kurse, të shohin materialet, dhe të dorëzojnë detyrat
- Mësimdhënësit: mund të menaxhojnë materialet, të krijojnë detyra, dhe të rishikojnë dorëzimet
- Administratorët: mund të menaxhojnë përdoruesit, kurset, dhe të trajtojnë kërkesat për regjistrim



Kërkesat specifike.

2.1 Kërkesat e lidhjeve të jashtme të aplikacionit

2.1.1 User interface (ndërlidhja e shfrytëzuesit)

Ndërfaqja e përdoruesit duhet të jetë intuitive dhe e lehtë për t'u përdorur, duke ofruar një përvojë të përdoruesit moderne dhe të përgjegjshme. Dizajni i ndërfaqes do të implementohet duke përdorur React me TypeScript dhe Tailwind CSS, me komponentë nga shadcn/ui.

Karakteristikat kryesore të UI:
- Dashboard responsive për secilën kategori përdoruesish
- Sidebar navigimi me opsione specifike për role
- Ndërfaqe tabelare për listimin e të dhënave
- Formularë të strukturuar për krijimin dhe editimin e të dhënave
- Modalë për veprime që kërkojnë konfirmim
- Komponentë informimi (toast) për feedback të përdoruesit
- Ndërfaqe për ngarkimin dhe shfaqjen e file-ave
- Ndërfaqe për menaxhimin e profileve të përdoruesve
- Dark/light mode toggle për personalizim
- Dizajn responsiv që funksionon në desktop, tablet dhe mobile


2.1.2 Hardware Interface (ndërlidhja me harduer)

Aplikacioni është një web aplikacion dhe nuk ka kërkesa specifike hardware përveç:
- Server web me minimum 2GB RAM dhe 10GB hapësirë disku
- Lidhje interneti për përdoruesit
- Pajisje përdoruesi (desktop, laptop, tablet, smartphone) me shfletues web modern


2.1.3 Software Interface

Aplikacioni ndërvepron me këto sisteme softuerike:
- Web server: nginx ose Apache
- Database: MySQL 8.0+
- PHP 8.2+ me përkrahje për Laravel 12
- Browser modern (Chrome, Firefox, Safari, Edge)
- Sistem operativ për server: Linux (të preferuar) ose Windows Server

Integrimet e brendshme:
- Laravel 12 për backend
- React 19 për frontend
- Inertia.js 2.0 për komunikimin midis Laravel dhe React
- Tailwind CSS për styling
- shadcn/ui për komponentë UI
- Spatie Permission për menaxhimin e roleve dhe lejeve


2.2. Atributet e sistemit të softuerit

1. Siguria:
   - Autentifikim i përdoruesve
   - Autorizim bazuar në role
   - Mbrojtje ndaj sulmeve CSRF
   - Enkriptim i fjalëkalimeve
   - Sanitizim i inputeve të përdoruesit

2. Besueshmëria:
   - Sistemi duhet të jetë i disponueshëm 99% të kohës
   - Backup i rregullt i të dhënave
   - Menaxhim i gabimeve
   - Validim i të dhënave në server dhe client

3. Performanca:
   - Koha e përgjigjes duhet të jetë nën 2 sekonda
   - Optimizim i databazës për kërkesa të shpeshta
   - Caching për të përmirësuar performancën
   - Pagination për lista të mëdha të dhënash

4. Shkallëzueshmëria:
   - Aftësia për të mbështetur minimum 100 përdorues njëkohësisht
   - Struktura e databazës e optimizuar për rritje

5. Mirëmbajtja:
   - Kod i strukturuar dhe i komentuar mirë
   - Ndjekja e praktikave më të mira të zhvillimit
   - Dokumentimi i API-ve
   - Testimi i automatizuar


2.3. Kërkesat e databazës

Databaza e sistemit do të implementohet në MySQL duke përfshirë këto tabela kryesore:
1. users - Të dhënat e përdoruesve
2. roles - Rolet e sistemit
3. permissions - Lejet specifike
4. role_has_permissions - Lidhja mes roleve dhe lejeve
5. model_has_roles - Lidhja e modeleve me role
6. courses - Informacioni i kurseve
7. enrollments - Regjistrimet e studentëve në kurse
8. enrollment_requests - Kërkesat për regjistrim
9. course_materials - Materialet e kurseve
10. homework - Detyrat për studentët
11. homework_submissions - Dorëzimet e detyrave
12. certificates - Certifikatat e përfundimit

Relacionet kryesore:
- Një përdorues mund të ketë një ose më shumë role
- Një kurs mund të ketë shumë regjistrime dhe materiale
- Një student mund të jetë i regjistruar në shumë kurse
- Një detyrë mund të ketë shumë dorëzime


2.4. UML Diagrami

2.4.1. Diagrami UML i interaksionit të shfrytëzuesit të sistemit

Diagrami i Klasave:
```
+------------------+       +------------------+       +--------------------+
|      User        |       |      Course      |       |     Enrollment     |
+------------------+       +------------------+       +--------------------+
| id: int          |       | id: int          |       | id: int            |
| name: string     |       | title: string    |       | user_id: int       |
| email: string    |       | description: text|       | course_id: int     |
| password: string |       | features: text   |       | status: string     |
| role: Role       |<---+  | price: decimal   |       | enrolled_at: date  |
+------------------+    |  | start_date: date |       +--------------------+
         ^              |  | end_date: date   |                ^
         |              |  | schedule: string |                |
         |              |  | max_students: int|                |
+------------------+    |  | status: string   |                |
|      Role        |    |  +------------------+                |
+------------------+    |          ^                           |
| id: int          |    |          |                           |
| name: string     |    |          |                           |
| guard_name: string    |          |                           |
+------------------+    |  +------------------+       +--------------------+
                        |  | CourseMaterial   |       | HomeworkSubmission |
                        |  +------------------+       +--------------------+
                        |  | id: int          |       | id: int            |
                        |  | course_id: int   |       | homework_id: int   |
                        |  | title: string    |       | user_id: int       |
                        |  | description: text|       | content: text      |
                        +--| user_id: int     |       | file_path: string  |
                           | file_path: string|       | status: string     |
                           +------------------+       | submitted_at: date |
                                                      +--------------------+
```

Diagrami i Sekuencës për Procesin e Regjistrimit:
```
Student                  System                  Admin
   |                        |                      |
   |--- Request Enrollment --->                    |
   |                        |                      |
   |                        |-- Notification ----->|
   |                        |                      |
   |                        |<---- Approval -------|
   |                        |                      |
   |<--- Enrollment Status --|                      |
   |                        |                      |
```

Diagrami i Use Case:
```
+------------------------------------------------------------------+
|                           EduTrack                               |
+------------------------------------------------------------------+
|                                                                  |
|  +----------+                                     +----------+   |
|  | Student  |                                     |  Admin   |   |
|  +----------+                                     +----------+   |
|       |                                                |         |
|       |                                                |         |
|       v                                                v         |
|  +-----------------+                          +-----------------+ |
|  | - View Courses  |                          | - Manage Users  | |
|  | - Enroll        |                          | - Manage Courses| |
|  | - View Materials|                          | - Approve       | |
|  | - Submit        |                          |   Enrollments   | |
|  |   Homework      |                          | - View Reports  | |
|  +-----------------+                          +-----------------+ |
|                                                                  |
|                           +----------+                           |
|                           | Teacher  |                           |
|                           +----------+                           |
|                                |                                  |
|                                v                                  |
|                           +-----------------+                     |
|                           | - Create        |                     |
|                           |   Materials     |                     |
|                           | - Create        |                     |
|                           |   Homework      |                     |
|                           | - Review        |                     |
|                           |   Submissions   |                     |
|                           | - Generate      |                     |
|                           |   Certificates  |                     |
|                           +-----------------+                     |
|                                                                  |
+------------------------------------------------------------------+
```



Përshkrimi I dizajnit të softuerit (Software Design Description (SDD))



1.1. Dizajni I aplikacionit

EduTrack është ndërtuar duke ndjekur parimet e dizajnit modern të aplikacioneve web, duke përdorur Laravel 12 dhe React 19. Aplikacioni ndjek arkitekturën MVC (Model-View-Controller) të Laravel-it, të kombinuar me komponentët React për frontend përmes Inertia.js.

Parimet kryesore të dizajnit:
1. Ndarje e pastër e përgjegjësive
2. Kod i ripërdorshëm dhe i modularizuar
3. Ndërfaqe intuitive dhe përdoruesi-qendër
4. Siguri e integruar në të gjitha nivelet
5. Performancë e optimizuar

Struktura e aplikacionit është organizuar në këto kategori kryesore:
- Models: Përfaqësojnë strukturën e të dhënave dhe relacionet
- Controllers: Menaxhojnë logjikën e biznesit dhe ndërveprimin me modelet
- Views: Implementuar si komponentë React përmes Inertia.js
- Services: Klasa për logjikë biznesi të riutilizueshme
- Policies: Rregullat e autorizimit
- Migrations: Strukturat e databazës

Sistemi është projektuar për të qenë i shkallëzueshëm dhe i mirëmbajtur, duke ndjekur praktikat më të mira të zhvillimit dhe standardet e industrisë.


Dizajni arkitekturor I sistemit

2.1.Arkitektura e aplikacionit dhe përshkrimi I komponenteve

EduTrack ndjek një arkitekturë të shtresuar që kombinon Laravel dhe React:

1. Shtresa e Databazës:
   - MySQL për ruajtjen e të dhënave
   - Migrimet për strukturën e tabelave
   - Modelet Eloquent për ndërveprimin me të dhënat

2. Shtresa e Backend (Laravel 12):
   - Controllers për trajtimin e kërkesave
   - Services për logjikën e biznesit
   - Middleware për filtrimin e kërkesave
   - API endpoints për komunikim me frontend
   - Spatie Permission për menaxhimin e roleve

3. Shtresa e Komunikimit:
   - Inertia.js si shtresë komunikimi midis Laravel dhe React
   - JSON për transferimin e të dhënave

4. Shtresa e Frontend (React 19):
   - Komponentë UI të ndërtuar me React dhe TypeScript
   - Tailwind CSS dhe shadcn/ui për styling
   - Komponentë për secilën faqe dhe funksionalitet
   - Hooks për menaxhimin e gjendjes
   - Form validation në client-side

Komponentët kryesorë të sistemit:

1. Autentifikimi dhe Autorizimi:
   - Implementon sistemin default të autentifikimit të Laravel
   - Përdor Spatie Permission për role dhe leje
   - Middleware për kontrollin e aksesit

2. Menaxhimi i Përdoruesve:
   - CRUD operacione për përdoruesit
   - Menaxhimi i roleve dhe lejeve
   - Ndërfaqe administrimi për administratorët

3. Menaxhimi i Kurseve:
   - Krijimi dhe editimi i kurseve
   - Caktimi i mësimdhënësve
   - Programimi i kurseve

4. Sistemi i Regjistrimit:
   - Procesi i kërkesës për regjistrim
   - Workflow-i i aprovimit
   - Menaxhimi i listës së pritjes

5. Materialet e Kursit:
   - Ngarkimi dhe organizimi i materialeve
   - Kategorizimi dhe etiketimi
   - Qasja e kontrolluar për studentët

6. Sistemi i Detyrave:
   - Krijimi i detyrave me afate
   - Dorëzimi i detyrave nga studentët
   - Vlerësimi dhe feedback

7. Gjenerimi i Certifikatave:
   - Krijimi i certifikatave për kurset e përfunduara
   - Eksportimi në PDF
   - Verifikimi i certifikatave

Flow i të dhënave:
1. Përdoruesi dërgon një kërkesë përmes UI
2. Inertia.js komunikon me backend-in
3. Middleware kontrollon autorizimin
4. Controller trajton kërkesën
5. Service implementon logjikën e biznesit
6. Modelet ndërveprojnë me databazën
7. Të dhënat kthehen te Controller
8. Controller i pasë të dhënat te frontend
9. React render-on UI me të dhënat e reja



Dokumentimi i testimit të softuerit (Software Test Documentation (STD))







1.	HYRJE

1.1.Përmbledhje e sistemit

EduTrack është një sistem menaxhimi i kurseve fizike i ndërtuar me Laravel 12 dhe React 19. Sistemi mbështet tre role kryesore: studentë, mësimdhënës dhe administratorë. Ky dokumentim testimi përshkruan strategjinë, metodologjinë, dhe rastet specifike të testimit për të siguruar që aplikacioni funksionon sipas kërkesave dhe është i lirë nga gabime.


1.2.Testim i afërt

Procesi i testimit do të fokusohet në sigurimin e funksionalitetit të plotë dhe korrekt të sistemit, duke mbuluar:
- Testim të njësive për komponentët individualë
- Testim integrimi për ndërveprimin midis moduleve
- Testim funksional për të verifikuar që funksionalitetet plotësojnë kërkesat
- Testim të ndërfaqes së përdoruesit
- Testim të performancës në kushte të ndryshme


2.	Plani I testimit

2.1. Karakteristikat që do të testohen

1. Sistemi i autentifikimit dhe autorizimit:
   - Regjistrimi i përdoruesve
   - Hyrja në sistem
   - Rikuperimi i fjalëkalimit
   - Kontrolli i aksesit bazuar në role

2. Menaxhimi i përdoruesve:
   - Krijimi, leximi, përditësimi dhe fshirja e përdoruesve
   - Caktimi i roleve
   - Menaxhimi i profileve

3. Menaxhimi i kurseve:
   - Krijimi dhe modifikimi i kurseve
   - Caktimi i mësimdhënësve
   - Programimi i kurseve

4. Sistemi i regjistrimit:
   - Procesi i kërkesës për regjistrim
   - Aprovimi/refuzimi i kërkesave
   - Përditësimi i statusit

5. Menaxhimi i materialeve:
   - Ngarkimi i materialeve
   - Qasja në materiale
   - Kontrolli i aksesit për materiale

6. Sistemi i detyrave:
   - Krijimi i detyrave
   - Dorëzimi i detyrave
   - Vlerësimi i dorëzimeve

7. Sistemi i certifikatave:
   - Gjenerimi i certifikatave
   - Eksportimi në PDF
   - Verifikimi i certifikatave

8. Ndërfaqja e përdoruesit:
   - Responsiviteti në pajisje të ndryshme
   - Funksionimi i dark/light mode
   - Qasja dhe përdorimi në shfletues të ndryshëm


2.2.Karakteristikat që nuk do të testohen

1. Performanca në shkallë të madhe (mbi 1000 përdorues njëkohësisht)
2. Integrimi me sisteme të palëve të treta që nuk janë pjesë e implementimit aktual
3. Kompatibiliteti me shfletues të vjetër (IE11 dhe më të vjetër)
4. Siguria e avancuar (penetration testing)
5. Disaster recovery në nivel sistemi


2.3.Mjetet dhe mjedisi i testimit

Mjetet e testimit:
- Jest dhe React Testing Library për testin e frontend-it
- PHPUnit për testimin e backend-it
- Laravel Dusk për testimin e browser-it
- Postman për testimin e API-ve
- DevTools të shfletuesit për testimin e performancës

Mjedisi i testimit:
- Server zhvillimi lokal
- Database dedikuar për testim
- Instanca të ndryshme të shfletuesve (Chrome, Firefox, Safari, Edge)
- Pajisje të ndryshme (desktop, tablet, mobile)


Rastet e testimit

3.1. Regjistrimi i përdoruesit në sistem

3.1.1.	Qëllimi

Të verifikohet që përdoruesit e rinj mund të regjistrohen në sistem duke përdorur të dhëna valide dhe të marrin rolin e duhur (Student) si default.








3.1.2.	Hyrjet

- Emri: John Doe
- Email: john.doe@example.com
- Fjalëkalimi: SecurePass123!
- Konfirmimi i fjalëkalimit: SecurePass123!


3.1.3.	Rezultati i pritur & kriteret e kalimit apo rënjes së testimit

Rezultati i pritur:
- Përdoruesi krijohet në databazë
- Një email verifikimi dërgohet në adresën e emailit
- Përdoruesit i caktohet roli "Student"
- Përdoruesi ridrejtohet në faqen e verifikimit të emailit

Kriteret e kalimit:
- Të gjitha veprimet e mësipërme ndodhin suksesshëm
- Përdoruesi mund të hyjë në sistem pas verifikimit të emailit

Kriteret e dështimit:
- Nuk krijohet rekordi në databazë
- Nuk dërgohet emaili i verifikimit
- Përdoruesit nuk i caktohet roli i duhur
- Sistemi kthen një mesazh gabimi


3.2. 

3.2.1.	Qëllimi

Të verifikohet që një student mund të zgjedhë një kurs nga lista e kurseve të disponueshme dhe të dërgojë një kërkesë për regjistrim.





3.2.2.	Hyrjet

- Përdoruesi i loguar me rol "Student"
- Përzgjedhja e kursit "Programim Web me Laravel"
- Klikimi në butonin "Dërgo kërkesë për regjistrim"


3.2.3.	Rezultati i pritur & kriteret e kalimit apo rënjes së testimit

Rezultati i pritur:
- Krijohet një rekord i ri në tabelën enrollment_requests me status "pending"
- Studentit i shfaqet një mesazh konfirmimi
- Administratori merr një njoftim për kërkesën e re

Kriteret e kalimit:
- Kërkesa ruhet suksesshëm në databazë
- Statusi i kërkesës është "pending"
- Shfaqet mesazhi i konfirmimit
- Kursi shfaqet në listën e kërkesave të studentit me statusin e duhur

Kriteret e dështimit:
- Kërkesa nuk ruhet në databazë
- Shfaqet një mesazh gabimi
- Studenti nuk mund të shohë statusin e kërkesës


3.3. Aprovimi i kërkesës për regjistrim nga administratori

3.3.1.	Qëllimi

Të verifikohet që një administrator mund të shohë kërkesat për regjistrim dhe të aprovojë një kërkesë, duke ndryshuar statusin e saj dhe duke krijuar një regjistrim të ri në kurs.



























3.3.2.	Hyrjet

- Përdoruesi i loguar me rol "Admin"
- Navigimi te faqja "Kërkesat për Regjistrim"
- Përzgjedhja e kërkesës me ID=1 (John Doe për kursin "Programim Web me Laravel")
- Klikimi në butonin "Aprovo"


3.3.3.	Rezultati i pritur & kriteret e kalimit apo rënjes së testimit

Rezultati i pritur:
- Statusi i kërkesës ndryshon në "approved"
- Krijohet një rekord i ri në tabelën enrollments
- Studenti shtohet në listën e studentëve të kursit
- Numri aktual i studentëve në kurs rritet me 1

Kriteret e kalimit:
- Përditësohet statusi i kërkesës në "approved"
- Krijohet rekordi i regjistrimit
- Studenti mund të shohë kursin në dashboard-in e tij
- Administratori mund të shohë studentin në listën e studentëve të kursit

Kriteret e dështimit:
- Statusi i kërkesës nuk ndryshon
- Nuk krijohet rekordi i regjistrimit
- Shfaqet një mesazh gabimi
- Studenti nuk shfaqet në listën e studentëve të kursit

SHEMBULL: 
Sistemi duhet të regjistrojë studentin në kurs saktësisht kur administratori aprovon kërkesën, dhe studenti duhet të ketë qasje të menjëhershme në materialet e kursit. Nëse kursi ka arritur numrin maksimal prej 20 studentësh, sistemi duhet të vendosë automatikisht studentët e tjerë në listën e pritjes.
